//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace CoffeeCard.MobilePay.Generated.Api.AccessTokenApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AccessTokenApi 
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AccessTokenApi(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Request an access token (JWT bearer token)
        /// </summary>
        /// <remarks>
        /// This is an authentication endpoint for merchant use.
        /// <br/>The access token endpoint is used to get the JWT (JSON Web Token) that
        /// <br/>must be passed in every API request in the `Authorization` header.
        /// <br/>The access token is a base64-encoded string value that must be
        /// <br/>acquired first before making any Vipps MobilePay API calls.
        /// <br/>The access token is valid for 1 hour in the test environment
        /// <br/>and 24 hours in the production environment.
        /// <br/>For more details, see [Standard authentication](/docs/APIs/access-token-api/standard-authentication/).
        /// </remarks>
        /// <param name="client_id">The `client_id` is available on portal.vippsmobilepay.com, under the *Developer* section.
        /// <br/>Think of it as the "username".</param>
        /// <param name="client_secret">The `client_secret` is available on portal.vippsmobilepay.com, under the *Developer* section.
        /// <br/>Think of it as the "password".
        /// <br/>Keep it secret.
        /// <br/>We will never ask for it, and we don't need it for anything.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchant_Serial_Number">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header
        /// <br/>can be used with all API keys, and can speed up any trouble-shooting of API
        /// <br/>problems quite a bit.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthorizationTokenResponse> FetchAuthorizationTokenUsingPostAsync(System.Guid client_id, string client_secret, string ocp_Apim_Subscription_Key, string merchant_Serial_Number, string vipps_System_Name, string vipps_System_Version, string vipps_System_Plugin_Name, string vipps_System_Plugin_Version)
        {
            return FetchAuthorizationTokenUsingPostAsync(client_id, client_secret, ocp_Apim_Subscription_Key, merchant_Serial_Number, vipps_System_Name, vipps_System_Version, vipps_System_Plugin_Name, vipps_System_Plugin_Version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request an access token (JWT bearer token)
        /// </summary>
        /// <remarks>
        /// This is an authentication endpoint for merchant use.
        /// <br/>The access token endpoint is used to get the JWT (JSON Web Token) that
        /// <br/>must be passed in every API request in the `Authorization` header.
        /// <br/>The access token is a base64-encoded string value that must be
        /// <br/>acquired first before making any Vipps MobilePay API calls.
        /// <br/>The access token is valid for 1 hour in the test environment
        /// <br/>and 24 hours in the production environment.
        /// <br/>For more details, see [Standard authentication](/docs/APIs/access-token-api/standard-authentication/).
        /// </remarks>
        /// <param name="client_id">The `client_id` is available on portal.vippsmobilepay.com, under the *Developer* section.
        /// <br/>Think of it as the "username".</param>
        /// <param name="client_secret">The `client_secret` is available on portal.vippsmobilepay.com, under the *Developer* section.
        /// <br/>Think of it as the "password".
        /// <br/>Keep it secret.
        /// <br/>We will never ask for it, and we don't need it for anything.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchant_Serial_Number">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header
        /// <br/>can be used with all API keys, and can speed up any trouble-shooting of API
        /// <br/>problems quite a bit.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationTokenResponse> FetchAuthorizationTokenUsingPostAsync(System.Guid client_id, string client_secret, string ocp_Apim_Subscription_Key, string merchant_Serial_Number, string vipps_System_Name, string vipps_System_Version, string vipps_System_Plugin_Name, string vipps_System_Plugin_Version, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("accesstoken/get");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (client_id == null)
                        throw new System.ArgumentNullException("client_id");
                    request_.Headers.TryAddWithoutValidation("client_id", ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (client_secret == null)
                        throw new System.ArgumentNullException("client_secret");
                    request_.Headers.TryAddWithoutValidation("client_secret", ConvertToString(client_secret, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request an access token
        /// </summary>
        /// <remarks>
        /// This is a token endpoint for partners in certain roles.
        /// <br/>This is based on OAuth (Open Authorization) and requires only `client_id` and `client_secret`.
        /// <br/>The `Ocp-Apim-Subscription-Key` is not used.
        /// <br/>*Important:* This endpoint will be renamed to `/authentication/v1/token` later,
        /// <br/>when the internal technical dependencies are resolved.
        /// <br/>For more details, see [Partner specialized authentication](/docs/APIs/access-token-api/partner-authentication/).
        /// </remarks>
        /// <param name="authorization">The string 'client_id:client_secret' encoded to Base64 with Basic in front</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponse> FetchTokenAsync(string authorization, Body body)
        {
            return FetchTokenAsync(authorization, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request an access token
        /// </summary>
        /// <remarks>
        /// This is a token endpoint for partners in certain roles.
        /// <br/>This is based on OAuth (Open Authorization) and requires only `client_id` and `client_secret`.
        /// <br/>The `Ocp-Apim-Subscription-Key` is not used.
        /// <br/>*Important:* This endpoint will be renamed to `/authentication/v1/token` later,
        /// <br/>when the internal technical dependencies are resolved.
        /// <br/>For more details, see [Partner specialized authentication](/docs/APIs/access-token-api/partner-authentication/).
        /// </remarks>
        /// <param name="authorization">The string 'client_id:client_secret' encoded to Base64 with Basic in front</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponse> FetchTokenAsync(string authorization, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("miami/v1/token");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// This _new_ accesstoken endpoint is used to get the JWT (JSON Web Token) that
    /// <br/>must be passed in every API request in the `Authorization` header.
    /// <br/>The access token is a base64-encoded string value that must be
    /// <br/>acquired first before making any Vipps MobilePay API calls.
    /// <br/>The access token is valid for 15 minutes both in the test environment
    /// <br/>and in the production environment.
    /// <br/>See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class TokenResponse
    {
        /// <summary>
        /// The type for the access token.
        /// <br/>This will always be `Bearer`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_type { get; set; }

        /// <summary>
        /// Token expiry time in seconds. The token is currently valid for 15 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_in", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Expires_in { get; set; }

        /// <summary>
        /// The access token itself, typically 1000+ characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Access_token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AuthorizationTokenResponse
    {
        /// <summary>
        /// The type for the access token.
        /// <br/>This will always be `Bearer`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_type { get; set; }

        /// <summary>
        /// Token expiry time in seconds.
        /// <br/>The access token is valid for 1 hour in the test environment
        /// <br/>and 24 hours in the production environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_in", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Expires_in { get; set; }

        /// <summary>
        /// Extra time added to expiry time. Currently disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ext_expires_in", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ext_expires_in { get; set; }

        /// <summary>
        /// Token expiry time in epoch time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Expires_on { get; set; }

        /// <summary>
        /// Token creation time in epoch time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("not_before", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Not_before { get; set; }

        /// <summary>
        /// A common resource object.
        /// <br/>Not used in token validation.
        /// <br/>This can be disregarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Resource { get; set; }

        /// <summary>
        /// The access token itself.
        /// <br/>It is a base64-encoded string, typically 1000+ characters.
        /// <br/>It can be decoded on https://jwt.io, and using standard libraries.
        /// <br/>See the documentation for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Access_token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Body
    {
        [Newtonsoft.Json.JsonProperty("grant_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BodyGrant_type Grant_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public enum BodyGrant_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"client_credentials")]
        Client_credentials = 0,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603